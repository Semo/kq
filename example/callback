#!/usr/bin/env python

import logging

logger = logging.getLogger(__name__)


def callback(status, job, result, exception, traceback):
    """Function executed by a worker after a job is fetched and consumed.

    This is an example callback function.

    :param status: The status of the job consumption. Possible values are
        ``timeout', ``failure`` and ``success``.
    :type status: str | unicode
    :param job: The job consumed by the worker
    :type job: kq.job.Job
    :param result: The result of the job execution.
    :type result: object
    :param exception: Exception raised while the job was running (i.e. status
        was ``failure``), or ``None`` if there were no errors (i.e. status was
        ``success``).
    :type exception: Exception
    :param traceback: The traceback of the exception (i.e. status was
        ``failure``) was running or ``None`` if there were no errors (i.e.
        status was ``success``).
    :type traceback: str | unicode
    """
    logger.info('Job UUID: {}'.format(job.id))
    logger.info('Enqueued at {}'.format(job.timestamp))
    logger.info('In topic: {}'.format(job.topic))
    logger.info('Function: {}'.format(job.func))
    logger.info('Arguments {}'.format(job.args))
    logger.info('Keyword arguments {}'.format(job.kwargs))
    logger.info('Timeout threshold {}'.format(job.timeout))

    if status == 'success':
        logger.info('The job returned: {}'.format(result))
        assert exception is None
        assert traceback is None

    elif status == 'timeout':
        logger.info('The job took too long and timed out')
        assert result is None
        assert exception is None
        assert traceback is None

    elif status == 'failure':
        logger.info('The job raised an exception on runtime')
        assert result is None
        assert exception is not None
        assert traceback is not None
